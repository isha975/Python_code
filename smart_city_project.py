# -*- coding: utf-8 -*-
"""Smart City Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19x0fP-HQhQFbdbEw2crAFA0NXy4QZIsI
"""

import numpy as np
import seaborn as sms
import matplotlib.pyplot as plt
import plotly.express as px
import pandas as pd
import folium as fl

data = pd.read_csv("Smart_City_index_headers.csv")
data = data.dropna()
print(data)

"""City: List of smart cities around the word

Country: List of countries where smart cities across the world are located

Smart_Mobility: Index calculated from assessment of city-wide Public Transportation System, ICT, accessibility infrastructure.

Smart_Environment: Index calculated from environmental sustainability impact, monitoring pollution and energy management

Smart_Government: Index calculated from comparative study of transparent governance & open data initiatives of smart cities across the

Smart_Economy: Index calculated through global comparison of city-wide productivity, economic vitality, and support for entrepreneurship 

Smart_People: Index calculated by comparing social and cultural plurality, education systems and its supporting ancillary

Smart_Living: Index calculated by measuring metric around healthcare services, social security and housing quality.

SmartCity_Index: Aggregate score for smart city model based on smart city supergroups.
"""

x = data["Country"]
y = data["Smart_People"]
bar,ax = plt.subplots(figsize = (30,50))
ax = sms.barplot(x,y,palette = "bright")
plt.xticks(rotation = 90)
plt.show()

x = data["Country"]
y = data["Smart_People"]
bar,ax = plt.subplots(figsize = (30,50))
ax = sms.barplot(y,x,palette = "bright", orient = "h")
plt.xticks(rotation = 90)
plt.show()

"""Conclusion: From both graphs displayed above we can come to the conclusion that Singapore has the most population of "Smart" People."""

x = data["City"]
y = data["Smart_Mobility "]
f,ax = plt.subplots(figsize = (30,20))
sms.pointplot(x,y,color = "#4FA5FF")
plt.xticks(rotation = 90)
plt.show()

"""Conclusion: From the above graph, we can draw the conclusion that Naples is the city with the lowest smart mobility while Chicago is the city with the highest."""

x = data["City"]
y = data["Smart_Government "]
plt.figure(figsize = (30,15))
plt.xticks(rotation = 90)
plt.plot(x,y,linewidth = 2, color = "#2EAAFF", linestyle = "-.") 
plt.scatter(x,y,color = "black")
plt.show()

"""Conclusion: The city with the smartest government was analyzed to be Copenhagen whereas on the other end of the spectrum is Beijing."""

plt.figure(figsize = (50,50))
sms.pairplot(data,hue = "Country")
plt.show()

"""Conclusion: A pairplot plot a pairwise relationships in a dataset. The pairplot function creates a grid of Axes such that each variable in data will by shared in the y-axis across a single row and in the x-axis across a single column."""

statename = data.loc[data["Country"] == "Canada"]
print(statename)
labels = statename["City"]
print(labels)
plt.figure(figsize = (10,7))
x = statename["Smart_Mobility "]
colors = np.array(["cyan", "pink", "red", "orange", "green", "purple"])
plt.pie(x,labels = labels, autopct = "%.2f", colors = colors)
plt.legend(bbox_to_anchor = (1,1))
plt.show()

"""The city in Canada with the highest social mobility is Montreal. The city with the lowest is Edmonton"""

x = data.groupby('Country')["Smart_Environment"].sum().sort_values(ascending = False).to_frame().reset_index()
x.style.background_gradient(cmap = "ocean")

plt.figure(figsize = (20,15))
labels = x["Country"]
plt.pie(x["Smart_Environment"], autopct = "%.2f", labels = labels)
plt.legend(bbox_to_anchor = (1.27,1))
plt.show()

"""Using the data above, we can conclude that Italy is The country with the smartest environment"""

canada = data.loc[data["Country"] == "Canada"]
canad =print(canada["SmartCity_Index"].sum())

italy = data.loc[data["Country"] == "Italy"]
ital = print(italy["SmartCity_Index"].sum())

us = data.loc[data["Country"] == "United States"]
u = print(us["SmartCity_Index"].sum())

china = data.loc[data["Country"] == "China"]
chin = print(china["SmartCity_Index"].sum())

germany = data.loc[data["Country"] == "Germany"]
german = print(germany["SmartCity_Index"].sum())

x = [41388, 57667, 45546, 12990, 62195]
plt.figure(figsize = (20,15))
labels = np.array(["Canada", "Italy", "United States", "China", "Germany"])
colors = np.array(["Magenta", "Green", "Blue", "Red", "Yellow"])
plt.pie(x, labels = labels, colors = colors, autopct = "%.2f")

centre_circle = plt.Circle((0,0),0.4,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

plt.legend(bbox_to_anchor = (1,1))
plt.show()

plt.figure(figsize = (20,15))
sms.violinplot(data = data2, palette = "magma")
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize = (20,15))
sms.boxplot(data = data2, palette = "bright")
plt.xticks(rotation = 90)
plt.show()

plt.figure(figsize = (20,15))
sms.barplot(data = data2, palette = "bright")
plt.xticks(rotation = 90)
plt.show()

fig, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(nrows=2, ncols=3)
fig.suptitle('Smart Index Bar Plot by Each Country', fontsize=30)
fig.set_size_inches(30,30)
x = ["Netherlands","Norway", "Canada", "Singapore", "Denmark", "Austria", "Sweden", "Switzerland", "Finland", "United States", "Germany", "France", "Luxembourg", "Iceland", "New Zealand" ]
sms.barplot(data = data2, x = x , y = "Smart_Living", palette = "bright", ax = ax1)
sms.barplot(data = data2, x = x , y = "Smart_Mobility ", palette = "dark", ax = ax2)
sms.barplot(data = data2, x = x , y = "Smart_Economy ", palette = "colorblind", ax = ax3)
sms.barplot(data = data2, x = x , y = "Smart_Government ", palette = "pastel", ax = ax4)
sms.barplot(data = data2, x = x , y = "Smart_People", palette = "deep", ax = ax5)
sms.barplot(data = data2, x = x , y = "Smart_Environment", palette = "muted", ax = ax6)
ax1.set_xticklabels(ax1.get_xticklabels(), rotation=90)
ax1.set_title(label="Smart Living", fontdict={'size': 20})
ax2.set_xticklabels(ax1.get_xticklabels(), rotation=90)
ax2.set_title(label="Smart Mobility", fontdict={'size': 20})
ax3.set_xticklabels(ax1.get_xticklabels(), rotation=90)
ax3.set_title(label="Smart Economy", fontdict={'size': 20})
ax4.set_xticklabels(ax1.get_xticklabels(), rotation=90)
ax4.set_title(label="Smart Government", fontdict={'size': 20})
ax5.set_xticklabels(ax1.get_xticklabels(), rotation=90)
ax5.set_title(label="Smart People", fontdict={'size': 20})
ax6.set_xticklabels(ax1.get_xticklabels(), rotation=90)
ax6.set_title(label="Smart Environment", fontdict={'size': 20})
plt.show()

plt.figure(figsize = (15,10))
sms.heatmap(data = data2, annot = True, annot_kws={"size":10}, fmt="", cmap = "tab20", linewidths = 2)
plt.show()

data2 = data2.drop(["SmartCity_Index_relative_Edmonton"], axis = 1)

map2 = fl.Map(location = (11.1271, 78.6569), zoom_start = 12)
fl.CircleMarker(location = (11.1271, 78.6569), radius = 50, popup = "<h4><b>Tamil Nadu").add_to(map2)
map2

map3 = fl.Map(location = [48.8566, 2.3522], zoom_start = 10)
fl.Marker(location = [48.8566, 2.3522], popup = "<h3> <b>Paris").add_to(map3)
map3

map4 = fl.Map(location = (11.1271, 78.6569), zoom_start = 7)
fl.Marker(location = (11.1271, 78.6569), popup = "<h3><b>Tamil Nadu").add_to(map4)
fl.Marker(location = (48.8566, 2.3522), popup = "<h3><b>Paris").add_to(map4)
fl.PolyLine(locations = [(11.1271, 78.6569), (48.8566, 2.3522)]).add_to(map4)
map4

data2 = data.groupby("Country").median().astype(int).sort_values("SmartCity_Index", ascending = False).head(14)
data2.style.background_gradient(cmap = "GnBu")

lat = [52.1326, 60.4720, 56.130367, 1.3521, 56.2639, 47.5162, 60.1282, 46.8182, 61.9241, 37.090240, 51.1657, 46.227638, 49.8153, 64.9631]
lon = [5.2913, 8.4689, -106.346771, 103.8198, 9.5018, 14.5501, 18.6435, 8.2275, 25.7482, -95.712891, 10.4515, 2.213749, 6.1296, 19.0208]
Country = ["Netherlands","Norway", "Canada", "Singapore", "Denmark", "Austria", "Sweden", "Switzerland", "Finland", "United States", "Germany", "France", "Luxembourg", "Iceland"]
#data2.insert(2,"Latitude", lat)
#data2.insert(2,"Longitude", lon)
#data2.insert(2,"Country", Country)
print(data2)

map = fl.Map(location = (64.9631, 19.0208), zoom_start = 3)
map

x = ["Netherlands","Norway", "Canada", "Singapore", "Denmark", "Austria", "Sweden", "Switzerland", "Finland", "United States", "Germany", "France", "Luxembourg", "Iceland" ]
for lat,lon,sc_index, country in zip(data2["Latitude"], data2["Longitude"], data2["SmartCity_Index"], x):
  fl.Marker(location = [lat,lon], popup= ("Country", country, "\nSmartCity_Index", sc_index, )).add_to(map)

map

plt.figure(figsize = (50,50))
x = ["Netherlands","Norway", "Canada", "Singapore", "Denmark", "Austria", "Sweden", "Switzerland", "Finland", "United States", "Germany", "France", "Luxembourg", "Iceland"]
sms.pairplot(data2)
plt.show()

fig = px.bar(data2, x = "SmartCity_Index", y = "Country",title = "Smart City Index of Countries", text = "SmartCity_Index", orientation = "h",
             width = 1250, height = 750, range_x = [0,max(data2["SmartCity_Index"])])
fig.update_traces(textposition = "inside")
fig.show()

var = data.groupby("Country")["Smart_Living"].sum().reset_index()
fig = px.scatter(var,x = "Country", y = "Smart_Living", color = "Smart_Living", size = "Smart_Living", hover_data = ["Smart_Living"], color_discrete_sequence = px.colors.cyclical.IceFire)
fig.update_layout(title_text = "Smart Living Index by Country", plot_bgcolor = "turquoise", width = 1500, height = 750)
fig.show()